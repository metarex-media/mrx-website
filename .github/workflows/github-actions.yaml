name: Build and deploy to docker hub

on:
  # Runs on pushes targeting the named branch
  push:
    branches:
      - mrx-staging

# Default to bash
defaults:
  run:
    shell: bash

jobs:

  staging-build:
    runs-on: [self-hosted, ubuntu-latest]
    env:
      HUGO_VERSION: 0.120.2
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Install Dart Sass
        run: sudo snap install dart-sass
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Build Hugo with clogrc
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: bash clogrc/build.sh

  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on:  [self-hosted, ubuntu-latest]
    needs: staging-build
    steps:

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: mrmxf/mrx-static

      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  Release_Builds:
    runs-on: [self-hosted, Linux] #for when there's a bash script making the changes
    env:
      GH_TOKEN:  ${{ secrets.PAT }}
    steps:
    ## include to use the latest version
    - uses: actions/checkout@v3
    - run: echo "I have run on tagged release"
    - run: echo "my tag is ${{ env.RELEASE_VERSION }}"
    # These get the tag from the .git file rather than passing through the value
    # build the release binaries
    - run: chmod u+x ./clogrc/go-build.sh && ./clogrc/go-build.sh ${{ secrets.PAT }}
    - run: chmod u+x ./clogrc/release.sh
    # upload the generated binaries
    - run: ./clogrc/release.sh ${{ env.RELEASE_VERSION }}